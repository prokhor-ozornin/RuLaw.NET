<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RuLaw</name>
    </assembly>
    <members>
        <member name="T:RuLaw.ApiDataFormat">
            <summary>
              <para>Format of RuLaw API data exchange.</para>
            </summary>
        </member>
        <member name="F:RuLaw.ApiDataFormat.Json">
            <summary>
              <para>JSON format.</para>
            </summary>
        </member>
        <member name="F:RuLaw.ApiDataFormat.Xml">
            <summary>
              <para>XML format.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputiesLawApiCallExtensions">
            <summary>
              <para>Set of extension methods for inteface <see cref="T:RuLaw.IDeputiesLawApiCall"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDeputiesLawApiCall"/>
        </member>
        <member name="M:RuLaw.IDeputiesLawApiCallExtensions.Position(RuLaw.IDeputiesLawApiCall,RuLaw.DeputyPosition)">
            <summary>
              <para>Specifies position of deputies to lookup.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="position">Position of deputies.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="call"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IDeputyTranscriptLawApiCallExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IDeputyTranscriptLawApiCall"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDeputyTranscriptLawApiCall"/>
        </member>
        <member name="M:RuLaw.IDeputyTranscriptLawApiCallExtensions.Deputy(RuLaw.IDeputyTranscriptLawApiCall,RuLaw.IDeputy)">
            <summary>
              <para>Specifies deputy, transcripts of whose speeches should be looked up.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="deputy">Subject deputy.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="deputy"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.ILawsLawApiCallExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.ILawsLawApiCall"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.ILawsLawApiCall"/>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.Branch(RuLaw.ILawsLawApiCall,RuLaw.ILawBranch)">
            <summary>
              <para>Specifies law branch.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="branch">Instance of law branch.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="branch"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.Deputy(RuLaw.ILawsLawApiCall,RuLaw.IDeputy)">
            <summary>
              <para>Specifies deputy.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="deputy">Instance of deputy.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="deputy"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.FederalAuthority(RuLaw.ILawsLawApiCall,RuLaw.IAuthority)">
            <summary>
              <para>Specifies federal authority.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="authority">Instance of authority.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="authority"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.Type(RuLaw.ILawsLawApiCall,RuLaw.LawTypes)">
            <summary>
              <para>Specifies type of laws.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="type">Type of laws.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="call"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.Sorting(RuLaw.ILawsLawApiCall,RuLaw.LawsSorting)">
            <summary>
              <para>Specifies type of laws sorting.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="sort">Laws sorting type.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="call"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.Status(RuLaw.ILawsLawApiCall,RuLaw.LawStatus)">
            <summary>
              <para>Specifies law's status.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="status">Status of laws.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="call"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.ProfileCommittee(RuLaw.ILawsLawApiCall,RuLaw.ICommittee)">
            <summary>
              <para>Specifies profile committee.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="committee">Instance of committee.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="committee"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.RegionalAuthority(RuLaw.ILawsLawApiCall,RuLaw.IAuthority)">
            <summary>
              <para>Specifies regional authority.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="authority">Instance of authority.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="authority"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.ResponsibleCommittee(RuLaw.ILawsLawApiCall,RuLaw.ICommittee)">
            <summary>
              <para>Specifies responsible committee.</para>
            </summary>
            <param name="committee">Instance of committee.</param>
            <param name="call">API call instance to use.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="committee"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.SoExecutorCommittee(RuLaw.ILawsLawApiCall,RuLaw.ICommittee)">
            <summary>
              <para>Specifies so-executor committee.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="committee">Instance of committee.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="committee"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.Topic(RuLaw.ILawsLawApiCall,RuLaw.ITopic)">
            <summary>
              <para>Specifies topic.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="topic">Instance of topic.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="topic"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCallExtensions.EventsSearchMode(RuLaw.ILawsLawApiCall,RuLaw.LawsEventsSearchMode)">
            <summary>
              <para>Specifies events search mode.</para>
            </summary>
            <param name="call">API call instance to use.</param>
            <param name="mode">Events search mode.</param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="call"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IVotesSearchLawApiCallExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IVotesSearchLawApiCall"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IVotesSearchLawApiCall"/>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCallExtensions.Convocation(RuLaw.IVotesSearchLawApiCall,RuLaw.IConvocation)">
            <summary>
              <para></para>
            </summary>
            <param name="call"></param>
            <param name="convocation"></param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="convocation"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCallExtensions.Deputy(RuLaw.IVotesSearchLawApiCall,RuLaw.IDeputy)">
            <summary>
              <para></para>
            </summary>
            <param name="call"></param>
            <param name="deputy"></param>
            <returns>Back reference to the provided <paramref name="call"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="call"/> or <paramref name="deputy"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.LawsEventsSearchMode">
            <summary>
              <para>Search mode for law's events.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsEventsSearchMode.All">
            <summary>
              <para>Search by all events.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsEventsSearchMode.Last">
            <summary>
              <para>Search by last event.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsEventsSearchMode.Expected">
            <summary>
              <para>Search for expected event.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawsSorting">
            <summary>
              <para>Type of laws sorting.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.Name">
            <summary>
              <para>By name of law.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.Number">
            <summary>
              <para>By number of law.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.DateDescending">
            <summary>
              <para>By proposal date in State Duma (descending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.DateAscending">
            <summary>
              <para>By proposal date in State Duma (ascending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.LastEventDateDescending">
            <summary>
              <para>By date of last event (descending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.LastEventDateAscending">
            <summary>
              <para>By date of last event (ascending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawsSorting.ResponsibleCommittee">
            <summary>
              <para>By responsible committee.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawStatus">
            <summary>
              <para>Status of law.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.Offered">
            <summary>
              <para>Proposed in Duma.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.ReviewStarted">
            <summary>
              <para>Being reviewed by Duma.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.InApproximateProgram">
            <summary>
              <para>Included in approximate program.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.InCommitteeProgram">
            <summary>
              <para>Included in committees programs.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.OutOfProgram">
            <summary>
              <para>Proposed in Duma without programs.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.ReviewFinished">
            <summary>
              <para>Review finished.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.Signed">
            <summary>
              <para>Signed by President of Russian Federation.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.Rejected">
            <summary>
              <para>Rejected by Duma.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.RejectedOrReturned">
            <summary>
              <para>Rejected or returned.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawStatus.Cancelled">
            <summary>
              <para>Cancelled due to other reasons.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawTypes">
            <summary>
              <para>Type of law.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawTypes.Federal">
            <summary>
              <para>Federal law.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawTypes.FederalConstitutional">
            <summary>
              <para>Federal constitutional law.</para>
            </summary>
        </member>
        <member name="F:RuLaw.LawTypes.ConstitutionAmendments">
            <summary>
              <para>Law on amendments to the Constitution of the Russian Federation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IAuthoritiesLawApiCall">
            <summary>
              <para>Representation of regional/federal authorities search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IAuthoritiesLawApiCall.Current(System.Boolean)">
            <summary>
              <para>Specifies whether to lookup currently active or inactive authorities.</para>
            </summary>
            <param name="current"><c>true</c> to search for active authorities, <c>false</c> to search for inactive ones.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IDeputiesLawApiCall">
            <summary>
              <para>Representation of deputies search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IDeputiesLawApiCall.Name(System.String)">
            <summary>
              <para>Specifies name of deputies to lookup.</para>
            </summary>
            <param name="name">Name or name part of deputies.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputiesLawApiCall.Position(System.String)">
            <summary>
              <para>Specifies position of deputies to lookup.</para>
            </summary>
            <param name="position">Position of deputies.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="position"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="position"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputiesLawApiCall.Current(System.Boolean)">
            <summary>
              <para>Specifies whether to lookup currently active or inactive deputies.</para>
            </summary>
            <param name="current"><c>true</c> to search for active deputies, <c>false</c> to search for inactive ones.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IDeputyTranscriptLawApiCall">
            <summary>
              <para>Representation of deputies transcripts search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IDeputyTranscriptLawApiCall.Deputy(System.Int64)">
            <summary>
              <para>Specifies identier of deputy, transcripts of whose speeches should be looked up.</para>
            </summary>
            <param name="id">Identifier of deputy.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IDeputyTranscriptLawApiCall.From(System.DateTime)">
            <summary>
              <para>Specifies lower bound of session's date.</para>
            </summary>
            <param name="from">Session's date.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IDeputyTranscriptLawApiCall.Name(System.String)">
            <summary>
              <para>Specifies name of question.</para>
            </summary>
            <param name="name">Name of question.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyTranscriptLawApiCall.To(System.DateTime)">
            <summary>
              <para>Specifies upper bound of session's date.</para>
            </summary>
            <param name="to">Session's date.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IInstancesLawApiCall">
            <summary>
              <para>Representation of instances search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IInstancesLawApiCall.Current(System.Boolean)">
            <summary>
              <para>Specifies whether to lookup currently active or inactive instances.</para>
            </summary>
            <param name="current"><c>true</c> to search for active instances, <c>false</c> to search for inactive ones.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.ILawApiCall">
            <summary>
              <para>Representation of a custom web request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawApiCall.Parameters">
            <summary>
              <para>Map of parameters name/values which are to be send with request.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawsLawApiCall">
            <summary>
              <para>Representation of ,aws search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Branch(System.Int64)">
            <summary>
              <para>Specifies identifier of law branch.</para>
            </summary>
            <param name="id">Identifier of law branch.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Deputy(System.Int64)">
            <summary>
              <para>Specifies identifier of deputy.</para>
            </summary>
            <param name="id">Identifier of deputy.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.DocumentNumber(System.String)">
            <summary>
              <para>Specifies identifier of law's document.</para>
            </summary>
            <param name="number">Law's document number.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="number"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.FederalAuthority(System.Int64)">
            <summary>
              <para>Specifies identifier of federal authority.</para>
            </summary>
            <param name="id">Identifier of authority.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Type(System.Int32)">
            <summary>
              <para>Specifies numeric code of law's type.</para>
            </summary>
            <param name="type">Type of laws.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Sorting(System.String)">
            <summary>
              <para>Specifies type of laws sorting.</para>
            </summary>
            <param name="sort">Laws sorting type.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sort"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sort"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Status(System.Int32)">
            <summary>
              <para>Specifies numeric code of law's status.</para>
            </summary>
            <param name="status">Status of laws.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Name(System.String)">
            <summary>
              <para>Specifies name of laws.</para>
            </summary>
            <param name="name">Full or partial name of law(s).</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">Если <paramref name="name"/> является <c>null</c> ссылкой</exception>
            <exception cref="T:System.ArgumentException">Если <paramref name="name"/> является <seealso cref="F:System.String.Empty"/> строкой.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Number(System.String)">
            <summary>
              <para>Specifies number of law.</para>
            </summary>
            <param name="number">Number of law.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">Если <paramref name="number"/> является <c>null</c> ссылкой</exception>
            <exception cref="T:System.ArgumentException">Если <paramref name="number"/> является <see cref="F:System.String.Empty"/> строкой.</exception>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.ProfileCommittee(System.Int64)">
            <summary>
              <para>Specifies identifier of profile committee.</para>
            </summary>
            <param name="id">Identifier of committee.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.RegionalAuthority(System.Int64)">
            <summary>
              <para>Specifies identifier of regional authority.</para>
            </summary>
            <param name="id">Identifier of authority.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.RegistrationEnd(System.DateTime)">
            <summary>
              <para>Specifies upper bound (max) of laws registration date.</para>
            </summary>
            <param name="date">Laws registration date.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.RegistrationStart(System.DateTime)">
            <summary>
              <para>Specifies lower bound (min) of laws registration date.</para>
            </summary>
            <param name="date">Laws registration date.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.ResponsibleCommittee(System.Int64)">
            <summary>
              <para>Specifies identifier of responsible committee.</para>
            </summary>
            <param name="id">Identifier of committee.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.SoExecutorCommittee(System.Int64)">
            <summary>
              <para>Specifies identifier of so-executor committee.</para>
            </summary>
            <param name="id">Identifier of committee.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.EventsSearchMode(System.Int32)">
            <summary>
              <para>Specifies numeric code of events search mode.</para>
            </summary>
            <param name="mode">Events search mode.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.ILawsLawApiCall.Topic(System.Int64)">
            <summary>
              <para>Specifies identifier of topic.</para>
            </summary>
            <param name="id">Identifier of topic.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IPagedLawApiCall`1">
            <summary>
              <para>Representation of a custom web request to Russian State Duma REST API, whose result can be paged.</para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RuLaw.IPagedLawApiCall`1.Page(System.Int32)">
            <summary>
              <para>Specifies number of results page to be returned.</para>
            </summary>
            <param name="page">Number of page in paged result. Must be a positive number.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IPagedLawApiCall`1.PageSize(RuLaw.PageSize)">
            <summary>
              <para>Specifies a size of page, i.e. number of records to return for each page.</para>
            </summary>
            <param name="size">Size of page of results.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IQuestionsLawApiCall">
            <summary>
              <para>Representation of sessions questions search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IQuestionsLawApiCall.From(System.DateTime)">
            <summary>
              <para>Specifies lower bound (min) date of sessions.</para>
            </summary>
            <param name="date">Sessions date.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IQuestionsLawApiCall.Name(System.String)">
            <summary>
              <para>Specifies name of questions.</para>
            </summary>
            <param name="name">Full or partial name of questions.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IQuestionsLawApiCall.To(System.DateTime)">
            <summary>
              <para>Specifies upper bound (max) date of sessions.</para>
            </summary>
            <param name="date">Sessions date.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IVotesSearchLawApiCall">
            <summary>
              <para>Representation of votes search request to Russian State Duma REST API.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Convocation(System.Int64)">
            <summary>
              <para>Specifies identifier of convocation.</para>
            </summary>
            <param name="id">Identifier of convocation.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.From(System.DateTime)">
            <summary>
              <para>Specifies lower bound (min) date of convocations.</para>
            </summary>
            <param name="date">Date of convocations.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.To(System.DateTime)">
            <summary>
              <para>Specifies upper bound (max) date of convocations.</para>
            </summary>
            <param name="date">Date of convocations.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Faction(System.Int64)">
            <summary>
              <para>Specifies identifier of faction.</para>
            </summary>
            <param name="id">Identifier of faction.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Deputy(System.Int64)">
            <summary>
              <para>Specifies identifier of deputy.</para>
            </summary>
            <param name="id">Identifier of deputy.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Number(System.String)">
            <summary>
              <para>Specifies number of law.</para>
            </summary>
            <param name="number">Number of law.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="number"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Keywords(System.String)">
            <summary>
              <para>Specifies search keywords.</para>
            </summary>
            <param name="keywords">Search keywords.</param>
            <returns>Back reference to the current request.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="keywords"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="keywords"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Page(System.Int32)">
            <summary>
              <para>Specifies number of results page. Equals to 1 by default.</para>
            </summary>
            <param name="page">Number of results page.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Limit(RuLaw.PageSize)">
            <summary>
              <para>Specifies number of records per page. Equals to 20 by default.</para>
            </summary>
            <param name="limit">Size of results page.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="M:RuLaw.IVotesSearchLawApiCall.Sorting(RuLaw.VotesSorting)">
            <summary>
              <para>Specifies type of results sorting. Equals to <see cref="F:RuLaw.VotesSorting.DateDescendingByDay"/> by default.</para>
            </summary>
            <param name="sorting">Type of sorting.</param>
            <returns>Back reference to the current request.</returns>
        </member>
        <member name="T:RuLaw.IActiveExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IActive"/>.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IActiveExtensions.Active``1(System.Linq.IQueryable{``0})">
            <summary>
              <para>Filters sequence of entities, leaving those in active state.</para>
            </summary>
            <param name="entities">Source sequence of entities to filter.</param>
            <returns>Filtered sequence of entities in active state.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IActiveExtensions.Active``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Filters sequence of entities, leaving those in active state.</para>
            </summary>
            <param name="entities">Source sequence of entities to filter.</param>
            <returns>Filtered sequence of entities in active state.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IActiveExtensions.Inactive``1(System.Linq.IQueryable{``0})">
            <summary>
              <para>Filters sequence of entities, leaving those in inactive state.</para>
            </summary>
            <param name="entities">Source sequence of entities to filter.</param>
            <returns>Filtered sequence of entities in inactive state.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IActiveExtensions.Inactive``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Filters sequence of entities, leaving those in inactive state.</para>
            </summary>
            <param name="entities">Source sequence of entities to filter.</param>
            <returns>Filtered sequence of entities in inactive state.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IDateableExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IDateable"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDateable"/>
        </member>
        <member name="M:RuLaw.IDateableExtensions.Date``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
              <para>Filters sequence of entities, leaving those with a date and time in specified range.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="entities">Source sequence of entities to filter.</param>
            <param name="from">Lower bound of date and time range.</param>
            <param name="to">Upper bound of date and time range.</param>
            <returns>Filtered sequence of entities with creation date and time ranging inclusively from <paramref name="from"/> to <paramref name="to"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IDateTranscriptMeetingExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IDateTranscriptMeeting"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDateTranscriptMeeting"/>
        </member>
        <member name="M:RuLaw.IDateTranscriptMeetingExtensions.Text(RuLaw.IDateTranscriptMeeting)">
            <summary>
              <para></para>
            </summary>
            <param name="meeting"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="meeting"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IDeputyExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IDeputy"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDeputy"/>
        </member>
        <member name="M:RuLaw.IDeputyExtensions.Position(RuLaw.IDeputy)">
            <summary>
              <para>Returns work position of deputy as instance of <see cref="T:RuLaw.DeputyPosition"/> enumeration.</para>
            </summary>
            <param name="deputy">Deputy instance.</param>
            <returns>Work position of deputy, or a <c>null</c> reference if <see cref="M:RuLaw.IDeputyExtensions.Position(RuLaw.IDeputy)"/> property was not yet set.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="deputy"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IDeputyExtensions.Position``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies, leaving those with specified position.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="position">Position to search for (case-insensitive).</param>
            <returns>Filtered sequence of deputies with specified position.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="deputies"/> or <paramref name="position"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IDeputyInfoExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IDeputyInfo"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDeputyInfo"/>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.FullName(RuLaw.IDeputyInfo)">
            <summary>
              <para>Returns full name of deputy.</para>
            </summary>
            <param name="deputy">Deputy instance.</param>
            <returns>Full name of deputy.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="deputy"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.BirthDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
              <para>Filters sequence of deputies, leaving those that were born in specified date period.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="from">Start date of period.</param>
            <param name="to">End date of period.</param>
            <returns>Filtered sequence of deputies that were born between <paramref name="from"/> and <paramref name="to"/> dates.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="deputies"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.Degree``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies, leaving those that have a specified scientific degree.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="degree">Scientific degree to search for (case-insensitive).</param>
            <returns>Filtered sequence of deputies that have a specified degree.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="deputies"/> or <paramref name="degree"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="degree"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.Faction``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies, leaving those belonging to specified faction.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="faction">Faction name to search for (case-insensitive).</param>
            <returns>Filtered sequence of deputies that belong to specified faction.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="deputies"/> or <paramref name="faction"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="faction"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.FullName``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies, leaving those containing a given part in their names.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="name">Part or full name to search for (case-insensitive).</param>
            <returns>Filtered sequence of deputies with specified name.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="deputies"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.Rank``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies, leaving those having a specified rank.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="rank">Rank to search for (case-insensitive).</param>
            <returns>Filtered sequence of deputies that have a specified rank.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="deputies"/> or <paramref name="rank"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="rank"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.Region``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies, leaving those linked to a specified region.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="region">Region to search for (case-insensitive).</param>
            <returns>Filtered sequence of deputies linked to a specified region.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="deputies"/> or <paramref name="region"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="region"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyInfoExtensions.WorkDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
              <para>Filters sequence of deputies, leaving those with a work timespan in specified borders.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="deputies">Source sequence of deputies to filter.</param>
            <param name="from">Lower bound of work starting date.</param>
            <param name="to">Upper bound of work ending date.</param>
            <returns>Filtered sequence of deputies.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="deputies"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IDeputyRequestExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IDeputyRequest"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IDeputyRequest"/>
        </member>
        <member name="M:RuLaw.IDeputyRequestExtensions.Answer``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies requests, leaving those containing specifid text fragment.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="requests">Source sequence of requests to filter.</param>
            <param name="text">Text fragment to search for (case-insensitive).</param>
            <returns>Filtered sequence of requests that contain specified text.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="requests"/> or <paramref name="text"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="text"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyRequestExtensions.ControlDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
              <para>Filters sequence of deputies requests, leaving those with control date in specified borders.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="requests">Source sequence of requests to filter.</param>
            <param name="from">Lower bound of control date period.</param>
            <param name="to">Upper bound of control date period.</param>
            <returns>Filtered sequence of requests.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="requests"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IDeputyRequestExtensions.Initiator``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of deputies requests, leaving those with a specified initiator.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="requests">Source sequence of requests to filter.</param>
            <param name="initiator">Full or partial name of initiator to search for (case-insensitive).</param>
            <returns>Filtered sequence of requests with specified initiator.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="requests"/> or <paramref name="initiator"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="initiator"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IDeputyRequestExtensions.SignDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
              <para>Filters sequence of deputies requests, leaving those with signing date in specified borders.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="requests">Source sequence of requests to filter.</param>
            <param name="from">Lower bound of signing date period.</param>
            <param name="to">Upper bound of signing date period.</param>
            <returns>Filtered sequence of requests.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="requests"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IEducationExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IEducation"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IEducation"/>
        </member>
        <member name="M:RuLaw.IEducationExtensions.Institution``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of educations, leaving those associated with specified institution.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="educations">Source sequence of educations to filter.</param>
            <param name="institution">Full or partial name of institution to search for (case-insensitive).</param>
            <returns>Filtered sequence of educations associated with given institution.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="educations"/> or <paramref name="institution"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="institution"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IEducationExtensions.Year``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int16},System.Nullable{System.Int16})">
            <summary>
              <para>Filters sequence of educations, leaving those that were gained in specified date period.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="educations">Source sequence of educations to filter.</param>
            <param name="from">Start date of period.</param>
            <param name="to">End date of period.</param>
            <returns>Filtered sequence of educations that were gained between <paramref name="from"/> and <paramref name="to"/> dates.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="educations"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.ILawEventExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.ILawEvent"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.ILawEvent"/>
        </member>
        <member name="M:RuLaw.ILawEventExtensions.Solution``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of law's events, leaving those having a specified resulting solution.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="events">Source sequence of events to filter.</param>
            <param name="solution">Solution to search for (case-insensitive).</param>
            <returns>Filtered sequence of events having a specified solution.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="events"/> or <paramref name="solution"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="solution"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="T:RuLaw.ILawExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.ILaw"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.ILaw"/>
        </member>
        <member name="M:RuLaw.ILawExtensions.Number``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Searches for a law with specified number and returns it.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="laws">Source sequence of laws for searching.</param>
            <param name="number">Unique number of law to search for.</param>
            <returns>Law with a specified number, or a <c>null</c> reference if it could not be found.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="laws"/> or <paramref name="number"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="T:RuLaw.INameableExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.INameable"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.INameable"/>
        </member>
        <member name="M:RuLaw.INameableExtensions.Name``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
              <para>Filters sequence of entities, leaving those with given name.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="entities">Source sequence of entities to filter.</param>
            <param name="name">Name to search for.</param>
            <returns>Filtered sequence of entities with specified name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.INameableExtensions.Name``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of entities, leaving those with given name.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="entities">Source sequence of entities to filter.</param>
            <param name="name">Name to search for.</param>
            <returns>Filtered sequence of entities with specified name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IPeriodableExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IPeriodable"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IPeriodable"/>
        </member>
        <member name="M:RuLaw.IPeriodableExtensions.Period``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
              <para>Filters sequence of entities, leaving those with a date/time period located between specified borders.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="entities">Source sequence of entities.</param>
            <param name="from">Lower bound of starting period.</param>
            <param name="to">Upper bound of ending period.</param>
            <returns>Filters sequence of entities.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entities"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.ITranscriptMeetingQuestionExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.ITranscriptMeetingQuestion"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.ITranscriptMeetingQuestion"/>
        </member>
        <member name="M:RuLaw.ITranscriptMeetingQuestionExtensions.Stage``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of transcripts questions, leaving those containing a specified stage.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="questions">Source sequence of questions for filtering.</param>
            <param name="stage">Stage to search for (case-insensitive).</param>
            <returns>Filtered sequence of questions that contain specified stage.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="questions"/> or <paramref name="stage"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="stage"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="T:RuLaw.ITranscriptMeetingQuestionPartExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.ITranscriptMeetingQuestionPart"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.ITranscriptMeetingQuestionPart"/>
        </member>
        <member name="M:RuLaw.ITranscriptMeetingQuestionPartExtensions.Text(RuLaw.ITranscriptMeetingQuestionPart)">
            <summary>
              <para>Returns full text of transcript.</para>
            </summary>
            <param name="part">Transcript part instance.</param>
            <returns>Text of transcript.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="part"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IVoteExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IVote"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IVote"/>
        </member>
        <member name="M:RuLaw.IVoteExtensions.Personal(RuLaw.IVote)">
            <summary>
              <para>Whether the vote represents a faction, or a deputy result.</para>
            </summary>
            <param name="vote">Vote instances.</param>
            <returns><c>true</c> if <paramref name="vote"/> represents a deputy, <c>false</c> if it represents a faction.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="vote"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IVoteExtensions.PersonResult(RuLaw.IVote)">
            <summary>
              <para>Returns result of deputy voting as instance of <see cref="T:RuLaw.VotePersonResult"/> enumeration.</para>
            </summary>
            <param name="vote">Vote instance.</param>
            <returns>Result of deputy voting, or a <c>null</c> reference if <see cref="M:RuLaw.IVoteExtensions.PersonResult(RuLaw.IVote)"/> property was not yet set.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="vote"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IVoteExtensions.ResultType(RuLaw.IVote)">
            <summary>
              <para>Returns type of voting result as instance of <see cref="T:RuLaw.VoteResultType"/> enumeration.</para>
            </summary>
            <param name="vote">Vote instance.</param>
            <returns>Type of voting result, or a <c>null</c> reference if <see cref="M:RuLaw.IVoteExtensions.ResultType(RuLaw.IVote)"/> property was not yet set.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="vote"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IVoteExtensions.Subject``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Filters sequence of votes, leaving those having a specified subject.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="votes">Source sequence of votes for filtering.</param>
            <param name="subject">Subject to search for (case-insensitive).</param>
            <returns>Filtered sequence of votes with specified subject.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="votes"/> or <paramref name="subject"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="subject"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IVoteExtensions.Successful``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Filters sequence of votes, leaving those that were successful.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="votes">Source sequence of votes for filtering.</param>
            <returns>Filtered sequence of successfull votes.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="votes"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IVoteExtensions.Unsuccessful``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Filters sequence of votes, leaving those that were unsuccessful.</para>
            </summary>
            <typeparam name="ENTITY">Type of entities.</typeparam>
            <param name="votes">Source sequence of votes for filtering.</param>
            <returns>Filtered sequence of unsuccessful votes.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="votes"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.Authority">
            <summary>
              <para>Law authority.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Authority.Active">
            <summary>
              <para>Whether the authority is active at present or not.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Authority.FromDate">
            <summary>
              <para>Start date of authority functioning.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Authority.FromDateOriginal">
            <summary>
              <para>Start date of authority functioning.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Authority.ToDate">
            <summary>
              <para>End date of authority functioning.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Authority.ToDateOriginal">
            <summary>
              <para>End date of authority functioning.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Committee">
            <summary>
              <para>Committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Committee.Active">
            <summary>
              <para>Whether the committee is active at present or not.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Committee.FromDate">
            <summary>
              <para>Start date of committee functioning.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Committee.FromDateOriginal">
            <summary>
              <para>Start date of committee functioning.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Committee.ToDate">
            <summary>
              <para>End date of committee functioning.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Committee.ToDateOriginal">
            <summary>
              <para>End date of committee functioning.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Convocation">
            <summary>
              <para>Duma's convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Convocation.FromDate">
            <summary>
              <para>Date when convocation was started.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Convocation.FromDateOriginal">
            <summary>
              <para>Date when convocation was started.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Convocation.Sessions">
            <summary>
              <para>Collection of sessions which are part of the convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Convocation.SessionsOriginal">
            <summary>
              <para>Collection of sessions which are part of the convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Convocation.ToDate">
            <summary>
              <para>Date when convocation was ended.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Convocation.ToDateOriginal">
            <summary>
              <para>Date when convocation was ended.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Convocation.#ctor">
            <summary>
              <para>Creates new convocation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.DateTranscriptMeeting">
            <summary>
              <para>Transcript of Duma's meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.Date">
            <summary>
              <para>Date of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.DateOriginal">
            <summary>
              <para>Date of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.Lines">
            <summary>
              <para>Transcript's text lines.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.LinesOriginal">
            <summary>
              <para>Transcript's text lines.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.Number">
            <summary>
              <para>Number of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.Votes">
            <summary>
              <para>Meeting's votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptMeeting.VotesOriginal">
            <summary>
              <para>Meeting's votes.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DateTranscriptMeeting.#ctor">
            <summary>
              <para>Creates new transcript of Duma's meeting.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DateTranscriptMeeting.CompareTo(RuLaw.IDateTranscriptMeeting)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IDateTranscriptMeeting"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IDateTranscriptMeeting"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.DateTranscriptMeeting.Equals(RuLaw.IDateTranscriptMeeting)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IDateTranscriptMeeting"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.DateTranscriptMeeting.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.DateTranscriptMeeting.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.DateTranscriptMeeting.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.DateTranscriptMeeting"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.DateTranscriptMeeting"/>.</returns>
        </member>
        <member name="T:RuLaw.Deputy">
            <summary>
              <para>Deputy/member of Council of Federation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Deputy.Active">
            <summary>
              <para>Whether the deputy is working at present or not.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Deputy.Position">
            <summary>
              <para>Work position of deputy.</para>
            </summary>
        </member>
        <member name="T:RuLaw.DeputyActivity">
            <summary>
              <para>Deputy's activity record.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyActivity.CommitteeId">
            <summary>
              <para>Identifier of committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyActivity.CommitteeNameGenitive">
            <summary>
              <para>Genitive name of committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyActivity.Name">
            <summary>
              <para>Name of activity.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DeputyActivity.CompareTo(RuLaw.IDeputyActivity)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IDeputyActivity"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IDeputyActivity"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.DeputyActivity.Equals(RuLaw.IDeputyActivity)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IDeputyActivity"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.DeputyActivity.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.DeputyActivity.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.DeputyActivity.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.DeputyActivity"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.DeputyActivity"/>.</returns>
        </member>
        <member name="T:RuLaw.DeputyInfo">
            <summary>
              <para>Detailed deputy information.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Id">
            <summary>
              <para>Unique identifier of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Active">
            <summary>
              <para>Whether deputy has authority and power at present moment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Activities">
            <summary>
              <para>Collection of deputy's activities in committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.ActivitiesOriginal">
            <summary>
              <para>Collection of deputy's activities in committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.BirthDate">
            <summary>
              <para>Birth date of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.BirthDateOriginal">
            <summary>
              <para>Birth date of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Degrees">
            <summary>
              <para>Scientific degrees of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.DegreesOriginal">
            <summary>
              <para>Scientific degrees of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Educations">
            <summary>
              <para>Higher educations of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.EducationsOriginal">
            <summary>
              <para>Higher educations of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.FactionId">
            <summary>
              <para>Identifier of deputy's political faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.FactionName">
            <summary>
              <para>Name of deputy's political faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.FactionRegion">
            <summary>
              <para>Association of deputy's political faction with a region.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.FactionRole">
            <summary>
              <para>Role of deputy's in his political faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.FirstName">
            <summary>
              <para>First name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.LastName">
            <summary>
              <para>Last name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.LawsCount">
            <summary>
              <para>Number of laws which have been initiated by the deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.MiddleName">
            <summary>
              <para>Middle name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Ranks">
            <summary>
              <para>Scientific ranks of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.RanksOriginal">
            <summary>
              <para>Scientific ranks of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.Regions">
            <summary>
              <para>Association of deputy's with regions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.RegionsOriginal">
            <summary>
              <para>Association of deputy's with regions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.SpeachesCount">
            <summary>
              <para>Number of deputy's public speaches.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.TranscriptLink">
            <summary>
              <para>URL link for transcripts of deputy's speaches.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.VoteLink">
            <summary>
              <para>URL link for deputy's votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.WorkStartDate">
            <summary>
              <para>Start date of deputy's authorities in last convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.WorkStartDateOriginal">
            <summary>
              <para>Start date of deputy's authorities in last convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.WorkEndDate">
            <summary>
              <para>End date of deputy's authorities in last convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyInfo.WorkEndDateOriginal">
            <summary>
              <para>End date of deputy's authorities in last convocation.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DeputyInfo.#ctor">
            <summary>
              <para>Creates new deputy info.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DeputyInfo.CompareTo(RuLaw.IDeputyInfo)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IDeputyInfo"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IDeputyInfo"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.DeputyInfo.Equals(RuLaw.IDeputyInfo)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IDeputyInfo"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.DeputyInfo.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.DeputyInfo.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.DeputyInfo.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.DeputyInfo"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.DeputyInfo"/>.</returns>
        </member>
        <member name="T:RuLaw.DeputyPosition">
            <summary>
              <para>Type of deputy's work position.</para>
            </summary>
        </member>
        <member name="F:RuLaw.DeputyPosition.DumaDeputy">
            <summary>
              <para>Member of the State Duma.</para>
            </summary>
        </member>
        <member name="F:RuLaw.DeputyPosition.FederationCouncilMember">
            <summary>
              <para>Member of the Council of Federation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.DeputyRequest">
            <summary>
              <para>Deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Id">
            <summary>
              <para>Unique identifier of deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Addressee">
            <summary>
              <para>Addressee of deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.AddresseeOriginal">
            <summary>
              <para>Addressee of deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Answer">
            <summary>
              <para>Text of answer for deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.ControlDate">
            <summary>
              <para>Date when deputy's request was in control stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.ControlDateOriginal">
            <summary>
              <para>Date when deputy's request was in control stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Date">
            <summary>
              <para>Date when deputy's request was initiated.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.DateOriginal">
            <summary>
              <para>Date when deputy's request was initiated.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.DocumentNumber">
            <summary>
              <para>Number of associated document.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.ResolutionNumber">
            <summary>
              <para>Number of associated resolution.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Initiator">
            <summary>
              <para>Initiator person of deputy request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Name">
            <summary>
              <para>Name of deputy request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.SignDate">
            <summary>
              <para>Date when deputy's request was signed.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.SignDateOriginal">
            <summary>
              <para>Date when deputy's request was signed.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.Signer">
            <summary>
              <para>Person who signed deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyRequest.SignerOriginal">
            <summary>
              <para>Person who signed deputy's request.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DeputyRequest.CompareTo(RuLaw.IDeputyRequest)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IDeputyRequest"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IDeputyRequest"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.DeputyRequest.Equals(RuLaw.IDeputyRequest)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IDeputyRequest"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.DeputyRequest.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.DeputyRequest.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.DeputyRequest.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.DeputyRequest"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.DeputyRequest"/>.</returns>
        </member>
        <member name="T:RuLaw.DeputyRequestAddressee">
            <summary>
              <para>Addressee of deputy's request.</para>
            </summary>
        </member>
        <member name="T:RuLaw.DeputyRequestSigner">
            <summary>
              <para>Person who signed deputy's request.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Education">
            <summary>
              <para>Deputy's higher education information record.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Education.Institution">
            <summary>
              <para>Name of education institution.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Education.Year">
            <summary>
              <para>Year of graduation.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Education.CompareTo(RuLaw.IEducation)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IEducation"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IEducation"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.Education.Equals(RuLaw.IEducation)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IEducation"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.Education.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.Education.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.Education.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.Education"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.Education"/>.</returns>
        </member>
        <member name="T:RuLaw.FederalAuthority">
            <summary>
              <para>Federal authority.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Instance">
            <summary>
              <para>Law workflow instance.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Instance.Active">
            <summary>
              <para>Whether the instance is active at present or not.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Law">
            <summary>
              <para>Duma's law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Id">
            <summary>
              <para>Unique identifier of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Comments">
            <summary>
              <para>Law comments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Committees">
            <summary>
              <para>Committees, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.CommitteesOriginal">
            <summary>
              <para>Committees, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Date">
            <summary>
              <para>Date when law was suggested for review.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.DateOriginal">
            <summary>
              <para>Date when law was suggested for review.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.LastEvent">
            <summary>
              <para>Last event, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.LastEventOriginal">
            <summary>
              <para>Last event, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Name">
            <summary>
              <para>Name of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Number">
            <summary>
              <para>Number of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Subject">
            <summary>
              <para>Subject of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.SubjectOriginal">
            <summary>
              <para>Subject of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.TranscriptUrl">
            <summary>
              <para>URL address of law's transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Type">
            <summary>
              <para>Type of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Law.Url">
            <summary>
              <para>URL address of law in ASOZD system.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Law.#ctor">
            <summary>
              <para>Creates new Duma's law.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Law.CompareTo(RuLaw.ILaw)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ILaw"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ILaw"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.Law.Equals(RuLaw.ILaw)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ILaw"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.Law.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.Law.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.Law.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.Law"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.Law"/>.</returns>
        </member>
        <member name="T:RuLaw.LawBranch">
            <summary>
              <para>Branch of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawCommittees">
            <summary>
              <para>Committees, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawCommittees.Profile">
            <summary>
              <para>List of profile committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawCommittees.ProfileOriginal">
            <summary>
              <para>List of profile committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawCommittees.Responsible">
            <summary>
              <para>Responsible committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawCommittees.ResponsibleOriginal">
            <summary>
              <para>Responsible committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawCommittees.SoExecutor">
            <summary>
              <para>List of so-executor committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawCommittees.SoExecutorOriginal">
            <summary>
              <para>List of so-executor committees.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawCommittees.#ctor">
            <summary>
              <para>Creates new committees, associated with a law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawEvent">
            <summary>
              <para>Event, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.Date">
            <summary>
              <para>Date of event occurrence.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.DateOriginal">
            <summary>
              <para>Date of event occurrence.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.Document">
            <summary>
              <para>Document, associated with a law's event.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.DocumentOriginal">
            <summary>
              <para>Document, associated with a law's event.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.Phase">
            <summary>
              <para>Phase of law's review process.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.PhaseOriginal">
            <summary>
              <para>Phase of law's review process.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.Solution">
            <summary>
              <para>Accepted decision (formulation).</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.Stage">
            <summary>
              <para>Stage of law's review process.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEvent.StageOriginal">
            <summary>
              <para>Stage of law's review process.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawEvent.CompareTo(RuLaw.ILawEvent)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ILawEvent"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ILawEvent"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.LawEvent.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.LawEvent"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.LawEvent"/>.</returns>
        </member>
        <member name="T:RuLaw.LawEventDocument">
            <summary>
              <para>Document, associated with a law's event.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEventDocument.Name">
            <summary>
              <para>Name of document.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawEventDocument.Type">
            <summary>
              <para>Type of document.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawEventDocument.CompareTo(RuLaw.ILawEventDocument)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ILawEventDocument"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ILawEventDocument"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.LawEventDocument.Equals(RuLaw.ILawEventDocument)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ILawEventDocument"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.LawEventDocument.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.LawEventDocument.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.LawEventDocument.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.LawEventDocument"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.LawEventDocument"/>.</returns>
        </member>
        <member name="T:RuLaw.LawEventPhase">
            <summary>
              <para>Phase of law's review process.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawEventStage">
            <summary>
              <para>Stage of law's review process.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawSubject">
            <summary>
              <para>Subject of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawSubject.Departments">
            <summary>
              <para>Departments that are subjects of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawSubject.DepartmentsOriginal">
            <summary>
              <para>Departments that are subjects of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawSubject.Deputies">
            <summary>
              <para>Deputies that are subjects of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawSubject.DeputiesOriginal">
            <summary>
              <para>Deputies that are subjects of law.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawSubject.#ctor">
            <summary>
              <para>Creates new subject of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.LawType">
            <summary>
              <para>Type of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.NameableEntity`1">
            <summary>
              <para>Represents abstract business domain entity that can have a have.</para>
            </summary>
        </member>
        <member name="P:RuLaw.NameableEntity`1.Id">
            <summary>
              <para>Unique identifier of entity.</para>
            </summary>
        </member>
        <member name="P:RuLaw.NameableEntity`1.Name">
            <summary>
              <para>Name of entity.</para>
            </summary>
        </member>
        <member name="M:RuLaw.NameableEntity`1.CompareTo(`0)">
            <summary>
              <para>Compares the current entity with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
            <param name="other">The <see cref="!:ENTITY"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.NameableEntity`1.Equals(`0)">
            <summary>
              <para>Determines whether two entities instances are equal.</para>
            </summary>
            <param name="other">The entity to compare with the current one.</param>
            <returns><c>true</c> if specified entity is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.NameableEntity`1.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.NameableEntity`1.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.NameableEntity`1.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current entity.</para>
            </summary>
            <returns>A string that represents the current entity.</returns>
        </member>
        <member name="T:RuLaw.PhaseStage">
            <summary>
              <para>Law workflow stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.PhaseStage.Phases">
            <summary>
              <para>Workflow events that are part of the stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.PhaseStage.PhasesOriginal">
            <summary>
              <para>Workflow events that are part of the stage.</para>
            </summary>
        </member>
        <member name="M:RuLaw.PhaseStage.#ctor">
            <summary>
              <para>Creates new law workflow stage.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Question">
            <summary>
              <para>Question of Duma's session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.Code">
            <summary>
              <para>Code of question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.Date">
            <summary>
              <para>Date of session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.DateOriginal">
            <summary>
              <para>Date of session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.EndLine">
            <summary>
              <para>Last line in question's transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.Name">
            <summary>
              <para>Title of question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.SessionCode">
            <summary>
              <para>Code of session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Question.StartLine">
            <summary>
              <para>First line in question's transcript.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Question.CompareTo(RuLaw.IQuestion)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IQuestion"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IQuestion"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.Question.Equals(RuLaw.IQuestion)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IQuestion"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.Question.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.Question.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.Question.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.Question"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.Question"/>.</returns>
        </member>
        <member name="T:RuLaw.RegionalAuthority">
            <summary>
              <para>Regional authority.</para>
            </summary>
        </member>
        <member name="T:RuLaw.DateTranscriptsResult">
            <summary>
              <para>Transcripts search result.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptsResult.Date">
            <summary>
              <para>Date of meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptsResult.DateOriginal">
            <summary>
              <para>Date of meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptsResult.Meetings">
            <summary>
              <para>List of meetings transcripts.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DateTranscriptsResult.MeetingsOriginal">
            <summary>
              <para>List of meetings transcripts.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DateTranscriptsResult.#ctor">
            <summary>
              <para>Creates new transcripts search result.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DateTranscriptsResult.CompareTo(RuLaw.IDateTranscriptsResult)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.DateTranscriptsResult"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.DateTranscriptsResult"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.DateTranscriptsResult.Equals(RuLaw.IDateTranscriptsResult)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IDateTranscriptsResult"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.DateTranscriptsResult.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.DateTranscriptsResult.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.DateTranscriptsResult.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.DateTranscriptsResult"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.DateTranscriptsResult"/>.</returns>
        </member>
        <member name="T:RuLaw.DeputySearchResult">
            <summary>
              <para>Deputy search results.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputySearchResult.Deputy">
            <summary>
              <para>Deputy info.</para>
            </summary>
        </member>
        <member name="T:RuLaw.DeputyTranscriptsResult">
            <summary>
              <para>Transcript of deputy's public speaches.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyTranscriptsResult.Count">
            <summary>
              <para>Number of questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyTranscriptsResult.Meetings">
            <summary>
              <para>Collection of duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyTranscriptsResult.MeetingsOriginal">
            <summary>
              <para>Collection of duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyTranscriptsResult.Name">
            <summary>
              <para>Full name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyTranscriptsResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.DeputyTranscriptsResult.PageSize">
            <summary>
              <para>Size of results page.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DeputyTranscriptsResult.#ctor">
            <summary>
              <para>Creates new deputy's transcript.</para>
            </summary>
        </member>
        <member name="M:RuLaw.DeputyTranscriptsResult.CompareTo(RuLaw.IDeputyTranscriptsResult)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IDeputyTranscriptsResult"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IDeputyTranscriptsResult"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.DeputyTranscriptsResult.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.DeputyTranscriptsResult"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.DeputyTranscriptsResult"/>.</returns>
        </member>
        <member name="T:RuLaw.LawsSearchResult">
            <summary>
              <para>Result of laws search.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawsSearchResult.Count">
            <summary>
              <para>Number of result laws.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawsSearchResult.Laws">
            <summary>
              <para>List of result laws.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawsSearchResult.LawsOriginal">
            <summary>
              <para>List of result laws.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawsSearchResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawsSearchResult.Wording">
            <summary>
              <para>Text query formulation.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawsSearchResult.#ctor">
            <summary>
              <para>Creates new result of laws search.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawsSearchResult.CompareTo(RuLaw.ILawsSearchResult)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ILawsSearchResult"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ILawsSearchResult"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.LawsSearchResult.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.LawsSearchResult"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.LawsSearchResult"/>.</returns>
        </member>
        <member name="T:RuLaw.LawTranscriptsResult">
            <summary>
              <para>Transcript of Duma's law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawTranscriptsResult.Comments">
            <summary>
              <para>Law's comments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawTranscriptsResult.Meetings">
            <summary>
              <para>List of law's associated meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawTranscriptsResult.MeetingsOriginal">
            <summary>
              <para>List of law's associated meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawTranscriptsResult.Name">
            <summary>
              <para>Name of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.LawTranscriptsResult.Number">
            <summary>
              <para>Number of law.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawTranscriptsResult.#ctor">
            <summary>
              <para>Creates new transcript of Duma's law.</para>
            </summary>
        </member>
        <member name="M:RuLaw.LawTranscriptsResult.CompareTo(RuLaw.ILawTranscriptsResult)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ILawTranscriptsResult"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ILawTranscriptsResult"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.LawTranscriptsResult.Equals(RuLaw.ILawTranscriptsResult)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ILawTranscriptsResult"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.LawTranscriptsResult.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.LawTranscriptsResult.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.LawTranscriptsResult.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.LawTranscriptsResult"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.LawTranscriptsResult"/>.</returns>
        </member>
        <member name="T:RuLaw.QuestionsSearchResult">
            <summary>
              <para>Result of questions search.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionsSearchResult.Count">
            <summary>
              <para>Number of result questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionsSearchResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionsSearchResult.PageSize">
            <summary>
              <para>Number of records per page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionsSearchResult.Questions">
            <summary>
              <para>List of questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionsSearchResult.QuestionsOriginal">
            <summary>
              <para>List of questions.</para>
            </summary>
        </member>
        <member name="M:RuLaw.QuestionsSearchResult.#ctor">
            <summary>
              <para>Creates new result of questions search.</para>
            </summary>
        </member>
        <member name="M:RuLaw.QuestionsSearchResult.CompareTo(RuLaw.IQuestionsSearchResult)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IQuestionsSearchResult"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IQuestionsSearchResult"/> to compare with this instance.</param>
        </member>
        <member name="T:RuLaw.QuestionTranscriptsResult">
            <summary>
              <para>Transcript of Duma's agenda question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionTranscriptsResult.Meetings">
            <summary>
              <para>Collection of duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.QuestionTranscriptsResult.MeetingsOriginal">
            <summary>
              <para>Collection of duma's meetings.</para>
            </summary>
        </member>
        <member name="M:RuLaw.QuestionTranscriptsResult.#ctor">
            <summary>
              <para>Creates new transcript of Duma's agenda question.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ResolutionTranscriptsResult">
            <summary>
              <para>Transcript of Duma law's resolution.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ResolutionTranscriptsResult.Meetings">
            <summary>
              <para>Collection of Duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ResolutionTranscriptsResult.MeetingsOriginal">
            <summary>
              <para>Collection of Duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ResolutionTranscriptsResult.Number">
            <summary>
              <para>Number of resolution.</para>
            </summary>
        </member>
        <member name="M:RuLaw.ResolutionTranscriptsResult.#ctor">
            <summary>
              <para>Creates new transcript of Duma law's resolution.</para>
            </summary>
        </member>
        <member name="M:RuLaw.ResolutionTranscriptsResult.Equals(RuLaw.IResolutionTranscriptsResult)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IResolutionTranscriptsResult"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.ResolutionTranscriptsResult.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.ResolutionTranscriptsResult.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.ResolutionTranscriptsResult.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.ResolutionTranscriptsResult"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.ResolutionTranscriptsResult"/>.</returns>
        </member>
        <member name="T:RuLaw.VotePersonResult">
            <summary>
              <para>Type of person's voting result.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotePersonResult.For">
            <summary>
              <para>Vote "for".</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotePersonResult.Against">
            <summary>
              <para>Vote "against".</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotePersonResult.Abstain">
            <summary>
              <para>Abstained.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotePersonResult.Absent">
            <summary>
              <para>Absent.</para>
            </summary>
        </member>
        <member name="T:RuLaw.VotesSearchResult">
            <summary>
              <para>Voting search results.</para>
            </summary>
        </member>
        <member name="P:RuLaw.VotesSearchResult.Count">
            <summary>
              <para>Total count of questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.VotesSearchResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.VotesSearchResult.PageSize">
            <summary>
              <para>Number of records per results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.VotesSearchResult.Votes">
            <summary>
              <para>List of resulting votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.VotesSearchResult.VotesOriginal">
            <summary>
              <para>List of resulting votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.VotesSearchResult.Wording">
            <summary>
              <para>Text query formulation.</para>
            </summary>
        </member>
        <member name="M:RuLaw.VotesSearchResult.#ctor">
            <summary>
              <para>Creates new voting search results.</para>
            </summary>
        </member>
        <member name="M:RuLaw.VotesSearchResult.CompareTo(RuLaw.IVotesSearchResult)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IVotesSearchResult"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IVotesSearchResult"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.VotesSearchResult.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.VotesSearchResult"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.VotesSearchResult"/>.</returns>
        </member>
        <member name="T:RuLaw.Session">
            <summary>
              <para>Duma work session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Session.Id">
            <summary>
              <para>Unique identifier of work session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Session.FromDate">
            <summary>
              <para>Date when work session was started.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Session.FromDateOriginal">
            <summary>
              <para>Date when work session was started.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Session.Name">
            <summary>
              <para>Name of work session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Session.ToDate">
            <summary>
              <para>Date when work session was ended.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Session.ToDateOriginal">
            <summary>
              <para>Date when work session was ended.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Session.CompareTo(RuLaw.ISession)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ISession"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ISession"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.Session.Equals(RuLaw.ISession)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ISession"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.Session.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.Session.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.Session.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.Session"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.Session"/>.</returns>
        </member>
        <member name="T:RuLaw.StagePhase">
            <summary>
              <para>Phase of law's workflow stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.StagePhase.Instance">
            <summary>
             <para>Law workflow instance.</para>
            </summary>
        </member>
        <member name="P:RuLaw.StagePhase.InstanceOriginal">
            <summary>
             <para>Law workflow instance.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Topic">
            <summary>
              <para>Topic (thematic block).</para>
            </summary>
        </member>
        <member name="T:RuLaw.TranscriptMeeting">
            <summary>
              <para>Transcript of Duma's meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeeting.Date">
            <summary>
              <para>Date of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeeting.DateOriginal">
            <summary>
              <para>Date of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeeting.LinesCount">
            <summary>
              <para>Number of lines in transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeeting.Number">
            <summary>
              <para>Number of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeeting.Questions">
            <summary>
              <para>Questions that were discussed during the meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeeting.QuestionsOriginal">
            <summary>
              <para>Questions that were discussed during the meeting.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptMeeting.#ctor">
            <summary>
              <para>Creates new transcript of Duma's meeting.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptMeeting.CompareTo(RuLaw.ITranscriptMeeting)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ITranscriptMeeting"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ITranscriptMeeting"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.TranscriptMeeting.Equals(RuLaw.ITranscriptMeeting)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ITranscriptMeeting"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeeting.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeeting.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeeting.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.TranscriptMeeting"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.TranscriptMeeting"/>.</returns>
        </member>
        <member name="T:RuLaw.TranscriptMeetingQuestion">
            <summary>
              <para>Transcript's question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestion.Name">
            <summary>
              <para>Title of question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestion.Parts">
            <summary>
              <para>List of transcript's fragments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestion.PartsOriginal">
            <summary>
              <para>List of transcript's fragments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestion.Stage">
            <summary>
              <para>Question's review stage.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestion.#ctor">
            <summary>
              <para>Creates new transcript's question.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestion.CompareTo(RuLaw.ITranscriptMeetingQuestion)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ITranscriptMeetingQuestion"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ITranscriptMeetingQuestion"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestion.Equals(RuLaw.ITranscriptMeetingQuestion)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ITranscriptMeetingQuestion"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestion.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestion.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestion.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.TranscriptMeetingQuestion"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.TranscriptMeetingQuestion"/>.</returns>
        </member>
        <member name="T:RuLaw.TranscriptMeetingQuestionPart">
            <summary>
              <para>Part of meeting question's transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestionPart.EndLine">
            <summary>
              <para>End line of transcript's text fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestionPart.Lines">
            <summary>
              <para>Lines of transcript's fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestionPart.LinesOriginal">
            <summary>
              <para>Lines of transcript's fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestionPart.StartLine">
            <summary>
              <para>Start line of transcript's text fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestionPart.Votes">
            <summary>
              <para>List of question' votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptMeetingQuestionPart.VotesOriginal">
            <summary>
              <para>List of question' votes.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestionPart.#ctor">
            <summary>
              <para>Creates new question's part.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestionPart.CompareTo(RuLaw.ITranscriptMeetingQuestionPart)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ITranscriptMeetingQuestionPart"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ITranscriptMeetingQuestionPart"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestionPart.Equals(RuLaw.ITranscriptMeetingQuestionPart)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ITranscriptMeetingQuestionPart"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestionPart.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestionPart.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.TranscriptMeetingQuestionPart.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.TranscriptMeetingQuestionPart"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.TranscriptMeetingQuestionPart"/>.</returns>
        </member>
        <member name="T:RuLaw.TranscriptVote">
            <summary>
              <para>Transcript's vote.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptVote.Date">
            <summary>
              <para>Date of voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptVote.DateOriginal">
            <summary>
              <para>Date of voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.TranscriptVote.Line">
            <summary>
              <para>Transcript's line number.</para>
            </summary>
        </member>
        <member name="M:RuLaw.TranscriptVote.CompareTo(RuLaw.ITranscriptVote)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.ITranscriptVote"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.ITranscriptVote"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.TranscriptVote.Equals(RuLaw.ITranscriptVote)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.ITranscriptVote"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.TranscriptVote.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.TranscriptVote.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="T:RuLaw.Vote">
            <summary>
              <para>Laws voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.Id">
            <summary>
              <para>Identifier of vote.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.AbsentVotesCount">
            <summary>
              <para>Count of absent (non-voted) deputies in a faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.AbstainVotesCount">
            <summary>
              <para>Count of abstained deputies in a faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.AgainstVotesCount">
            <summary>
              <para>Count of deputies in a faction who have voted against.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.Date">
            <summary>
              <para>Date of voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.DateOriginal">
            <summary>
              <para>Date of voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.ForVotesCount">
            <summary>
              <para>Count of deputies in a faction who have voted for.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.PersonResult">
            <summary>
              <para>Result of deputy voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.ResultType">
            <summary>
              <para>Type of voting result.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.Subject">
            <summary>
              <para>Subject of convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.Successful">
            <summary>
              <para>Whether the law passed (true) or not (false) according to voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Vote.TotalVotesCount">
            <summary>
              <para>Number of voted deputies in faction.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Vote.CompareTo(RuLaw.IVote)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.IVote"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.IVote"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.Vote.Equals(RuLaw.IVote)">
            <summary>
              <para>Determines whether two <see cref="T:RuLaw.IVote"/> instances are equal.</para>
            </summary>
            <param name="other">The instance to compare with the current one.</param>
            <returns><c>true</c> if specified instance is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.Vote.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.Vote.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.Vote.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.Vote"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.Vote"/>.</returns>
        </member>
        <member name="T:RuLaw.VoteResultType">
            <summary>
              <para>Type of vote result.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VoteResultType.Quantitative">
            <summary>
              <para>Quantitative.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VoteResultType.Rating">
            <summary>
              <para>Rating.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VoteResultType.Qualitative">
            <summary>
              <para>Qualitative.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VoteResultType.Alternative">
            <summary>
              <para>Alternative.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IActive">
            <summary>
              <para>Represents a business domain entity that can be either in active or inactive state.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IActive.Active">
            <summary>
              <para>State of entity (active/inactive).</para>
            </summary>
        </member>
        <member name="T:RuLaw.IAuthority">
            <summary>
              <para>Law authority.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ICommittee">
            <summary>
              <para>Committee.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IConvocation">
            <summary>
              <para>Duma's convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IConvocation.Sessions">
            <summary>
              <para>Collection of sessions which are part of the convocation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDateable">
            <summary>
              <para>Representation of a business entity that have an associated date.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDateable.Date">
            <summary>
              <para>Date/time of the associated entity.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDateTranscriptMeeting">
            <summary>
              <para>Transcript of Duma's meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDateTranscriptMeeting.Lines">
            <summary>
              <para>Transcript's text lines.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDateTranscriptMeeting.Number">
            <summary>
              <para>Number of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDateTranscriptMeeting.Votes">
            <summary>
              <para>Meeting's votes.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputy">
            <summary>
              <para>Deputy/member of Council of Federation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputy.Position">
            <summary>
              <para>Work position of deputy.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputyActivity">
            <summary>
              <para>Deputy's activity record.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyActivity.CommitteeId">
            <summary>
              <para>Identifier of committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyActivity.CommitteeNameGenitive">
            <summary>
              <para>Genitive name of committee.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputyInfo">
            <summary>
              <para>Detailed deputy information.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.Activities">
            <summary>
              <para>Collection of deputy's activities in committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.BirthDate">
            <summary>
              <para>Birth date of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.Degrees">
            <summary>
              <para>Scientific degrees of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.Educations">
            <summary>
              <para>Higher educations of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.FactionId">
            <summary>
              <para>Identifier of deputy's political faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.FactionName">
            <summary>
              <para>Name of deputy's political faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.FactionRegion">
            <summary>
              <para>Association of deputy's political faction with a region.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.FactionRole">
            <summary>
              <para>Role of deputy's in his political faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.FirstName">
            <summary>
              <para>First name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.LastName">
            <summary>
              <para>Last name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.LawsCount">
            <summary>
              <para>Number of laws which have been initiated by the deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.MiddleName">
            <summary>
              <para>Middle name of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.Ranks">
            <summary>
              <para>Scientific ranks of deputy.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.Regions">
            <summary>
              <para>Association of deputy's with regions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.SpeachesCount">
            <summary>
              <para>Number of deputy's public speaches.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.TranscriptLink">
            <summary>
              <para>URL link for transcripts of deputy's speaches.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.VoteLink">
            <summary>
              <para>URL link for deputy's votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.WorkStartDate">
            <summary>
              <para>Start date of deputy's authorities in last convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyInfo.WorkEndDate">
            <summary>
              <para>End date of deputy's authorities in last convocation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputyRequest">
            <summary>
              <para>Deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.Addressee">
            <summary>
              <para>Addressee of deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.Answer">
            <summary>
              <para>Text of answer for deputy's request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.ControlDate">
            <summary>
              <para>Date when deputy's request was in control stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.DocumentNumber">
            <summary>
              <para>Number of associated document.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.ResolutionNumber">
            <summary>
              <para>Number of associated resolution.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.Initiator">
            <summary>
              <para>Initiator person of deputy request.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.SignDate">
            <summary>
              <para>Date when deputy's request was signed.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyRequest.Signer">
            <summary>
              <para>Person who signed deputy's request.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputyRequestAddressee">
            <summary>
              <para>Addressee of deputy's request.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputyRequestSigner">
            <summary>
              <para>Person who signed deputy's request.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IEducation">
            <summary>
              <para>Deputy's higher education information record.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IEducation.Institution">
            <summary>
              <para>Name of education institution.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IEducation.Year">
            <summary>
              <para>Year of graduation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IEntity">
            <summary>
              <para>Representation of a generic bussiness entity for Russian State Duma REST web service domain model.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IEntity.Id">
            <summary>
              <para>Unique identifier of entity.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IInstance">
            <summary>
              <para>Law workflow instance.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILaw">
            <summary>
              <para>Duma's law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.Comments">
            <summary>
              <para>Law comments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.Committees">
            <summary>
              <para>Committees, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.LastEvent">
            <summary>
              <para>Last event, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.Number">
            <summary>
              <para>Number of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.Subject">
            <summary>
              <para>Subject of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.TranscriptUrl">
            <summary>
              <para>URL address of law's transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.Type">
            <summary>
              <para>Type of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILaw.Url">
            <summary>
              <para>URL address of law in ASOZD system.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawBranch">
            <summary>
              <para>Branch of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawCommittees">
            <summary>
              <para>Committees, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawCommittees.Profile">
            <summary>
              <para>List of profile committees.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawCommittees.Responsible">
            <summary>
              <para>Responsible committee.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawCommittees.SoExecutor">
            <summary>
              <para>List of so-executor committees.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawEvent">
            <summary>
              <para>Event, associated with a law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawEvent.Document">
            <summary>
              <para>Document, associated with a law's event.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawEvent.Phase">
            <summary>
              <para>Phase of law's review process.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawEvent.Solution">
            <summary>
              <para>Accepted decision (formulation).</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawEvent.Stage">
            <summary>
              <para>Stage of law's review process.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawEventDocument">
            <summary>
              <para>Document, associated with a law's event.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawEventDocument.Type">
            <summary>
              <para>Type of document.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawEventPhase">
            <summary>
              <para>Phase of law's review process.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawEventStage">
            <summary>
              <para>Stage of law's review process.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawSubject">
            <summary>
              <para>Subject of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawSubject.Departments">
            <summary>
              <para>Departments that are subjects of law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawSubject.Deputies">
            <summary>
              <para>Deputies that are subjects of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawType">
            <summary>
              <para>Type of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.INameable">
            <summary>
              <para>Representation of a business entity which have a name.</para>
            </summary>
        </member>
        <member name="P:RuLaw.INameable.Name">
            <summary>
              <para>Name of the entity.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IPeriodable">
            <summary>
              <para>Represents a business domain entity that is associated with a time period.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IPeriodable.FromDate">
            <summary>
              <para>Start date/time of period.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IPeriodable.ToDate">
            <summary>
              <para>End date/time of period, or a <c>null</c> reference if it's not finished.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IPhaseStage">
            <summary>
              <para>Law workflow stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IPhaseStage.Phases">
            <summary>
              <para>Workflow events that are part of the stage.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IQuestion">
            <summary>
              <para>Question of Duma's session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestion.Code">
            <summary>
              <para>Code of question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestion.EndLine">
            <summary>
              <para>Last line in question's transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestion.SessionCode">
            <summary>
              <para>Code of session.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestion.StartLine">
            <summary>
              <para>First line in question's transcript.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ISession">
            <summary>
              <para>Duma work session.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IStagePhase">
            <summary>
              <para>Phase of law's workflow stage.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IStagePhase.Instance">
            <summary>
             <para>Law workflow instance.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ITopic">
            <summary>
              <para>Topic (thematic block).</para>
            </summary>
        </member>
        <member name="T:RuLaw.ITranscriptMeeting">
            <summary>
              <para>Transcript of Duma's meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeeting.LinesCount">
            <summary>
              <para>Number of lines in transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeeting.Number">
            <summary>
              <para>Number of meeting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeeting.Questions">
            <summary>
              <para>Questions that were discussed during the meeting.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ITranscriptMeetingQuestion">
            <summary>
              <para>Transcript's question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeetingQuestion.Parts">
            <summary>
              <para>List of transcript's fragments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeetingQuestion.Stage">
            <summary>
              <para>Question's review stage.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ITranscriptMeetingQuestionPart">
            <summary>
              <para>Part of meeting question's transcript.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeetingQuestionPart.EndLine">
            <summary>
              <para>End line of transcript's text fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeetingQuestionPart.Lines">
            <summary>
              <para>Lines of transcript's fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeetingQuestionPart.StartLine">
            <summary>
              <para>Start line of transcript's text fragment.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptMeetingQuestionPart.Votes">
            <summary>
              <para>List of question' votes.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ITranscriptVote">
            <summary>
              <para></para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptVote.Line">
            <summary>
              <para>Transcript's line number.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IVote">
            <summary>
              <para></para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.AbsentVotesCount">
            <summary>
              <para>Count of absent (non-voted) deputies in a faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.AbstainVotesCount">
            <summary>
              <para>Count of abstained deputies in a faction.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.AgainstVotesCount">
            <summary>
              <para>Count of deputies in a faction who have voted against.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.ForVotesCount">
            <summary>
              <para>Count of deputies in a faction who have voted for.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.PersonResult">
              <para>Result of deputy voting.</para>
        </member>
        <member name="P:RuLaw.IVote.ResultType">
            <summary>
              <para>Type of voting result.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.Subject">
            <summary>
              <para>Subject of convocation.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.Successful">
            <summary>
              <para>Whether the law passed (true) or not (false) according to voting.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVote.TotalVotesCount">
            <summary>
              <para>Number of voted deputies in faction.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDateTranscriptsResult">
            <summary>
              <para>Transcripts search result.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDateTranscriptsResult.Meetings">
            <summary>
              <para>List of meetings transcripts.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IDeputyTranscriptsResult">
            <summary>
              <para>Transcript of deputy's public speaches.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyTranscriptsResult.Count">
            <summary>
              <para>Number of questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyTranscriptsResult.Meetings">
            <summary>
              <para>Collection of duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyTranscriptsResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IDeputyTranscriptsResult.PageSize">
            <summary>
              <para>Size of results page.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawsSearchResult">
            <summary>
              <para>Result of laws search.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawsSearchResult.Count">
            <summary>
              <para>Number of result laws.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawsSearchResult.Laws">
            <summary>
              <para>List of result laws.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawsSearchResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawsSearchResult.Wording">
            <summary>
              <para>Text query formulation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.ILawTranscriptsResult">
            <summary>
              <para>Transcript of Duma's law.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawTranscriptsResult.Comments">
            <summary>
              <para>Law's comments.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawTranscriptsResult.Meetings">
            <summary>
              <para>List of law's associated meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ILawTranscriptsResult.Number">
            <summary>
              <para>Number of law.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IQuestionsSearchResult">
            <summary>
              <para>Result of questions search.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestionsSearchResult.Count">
            <summary>
              <para>Number of result questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestionsSearchResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestionsSearchResult.PageSize">
            <summary>
              <para>Number of records per page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestionsSearchResult.Questions">
            <summary>
              <para>List of questions.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IQuestionTranscriptsResult">
            <summary>
              <para>Transcript of Duma's agenda question.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IQuestionTranscriptsResult.Meetings">
            <summary>
              <para>Collection of duma's meetings.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IResolutionTranscriptsResult">
            <summary>
              <para>Transcript of Duma law's resolution.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IResolutionTranscriptsResult.Meetings">
            <summary>
              <para>Collection of Duma's meetings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IResolutionTranscriptsResult.Number">
            <summary>
              <para>Number of resolution.</para>
            </summary>
        </member>
        <member name="T:RuLaw.IVotesSearchResult">
            <summary>
              <para>Voting search results.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVotesSearchResult.Count">
            <summary>
              <para>Total count of questions.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVotesSearchResult.Page">
            <summary>
              <para>Number of results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVotesSearchResult.PageSize">
            <summary>
              <para>Number of records per results page.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVotesSearchResult.Votes">
            <summary>
              <para>List of resulting votes.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVotesSearchResult.Wording">
            <summary>
              <para>Text query formulation.</para>
            </summary>
        </member>
        <member name="T:RuLaw.Error">
            <summary>
              <para>RuLaw API call error.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Error.#ctor">
            <summary>
              <para>Creates new error.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Error.#ctor(System.Int32,System.String)">
            <summary>
              <para>Creates new error.</para>
            </summary>
            <param name="code">Numeric code of error.</param>
            <param name="text">Text description of error.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="text"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="text"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="P:RuLaw.Error.Code">
            <summary>
              <para>Numeric code of error.</para>
            </summary>
        </member>
        <member name="P:RuLaw.Error.Text">
            <summary>
              <para>Text description of error.</para>
            </summary>
        </member>
        <member name="M:RuLaw.Error.CompareTo(RuLaw.Error)">
            <summary>
              <para>Compares the current <see cref="T:RuLaw.Error"/> instance with another.</para>
            </summary>
            <returns>A value that indicates the relative order of the instances being compared.</returns>
            <param name="other">The <see cref="T:RuLaw.Error"/> to compare with this instance.</param>
        </member>
        <member name="M:RuLaw.Error.Equals(RuLaw.Error)">
            <summary>
              <para>Determines whether two errors instances are equal.</para>
            </summary>
            <param name="other">The error to compare with the current one.</param>
            <returns><c>true</c> if specified error is equal to the current, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RuLaw.Error.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</para>
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c>.</returns>
        </member>
        <member name="M:RuLaw.Error.GetHashCode">
            <summary>
              <para>Returns hash code for the current object.</para>
            </summary>
            <returns>Hash code of current instance.</returns>
        </member>
        <member name="M:RuLaw.Error.ToString">
            <summary>
              <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:RuLaw.Error"/> instance.</para>
            </summary>
            <returns>A string that represents the current <see cref="T:RuLaw.Error"/>.</returns>
        </member>
        <member name="T:RuLaw.DateTimeExtensions">
            <summary>
              <para>Set of extension methods for structure <see cref="T:System.DateTime"/>.</para>
            </summary>
            <seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:RuLaw.DateTimeExtensions.RuLawDate(System.DateTime)">
            <summary>
              <para>Returns a string representation of specified date in a format that used by the RuLaw API.</para>
            </summary>
            <param name="date"><see cref="T:System.DateTime"/> instance to convert to string. Only date component is used.</param>
            <returns>String representation of date.</returns>
        </member>
        <member name="T:RuLaw.ObjectExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Object"/>.</para>
            </summary>
            <seealso cref="T:System.Object"/>
        </member>
        <member name="M:RuLaw.ObjectExtensions.Json(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
              <para>Serializes specified object into JSON string.</para>
            </summary>
            <param name="subject">Target object to be serialized.</param>
            <param name="settings">Serialization settings. If not specified, default settings set (<see cref="P:RuLaw.JsonDefaultSettings.Serializer"/>) will be used.</param>
            <returns>JSON serialized version of <paramref name="subject"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="subject"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:Newtonsoft.Json.JsonConvert"/>
            <seealso cref="T:RuLaw.JsonDefaultSettings"/>
        </member>
        <member name="T:RuLaw.StringExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.String"/>.</para>
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:RuLaw.StringExtensions.Json``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
              <para>Deserializes object from JSON string.</para>
            </summary>
            <typeparam name="T">Type of object to be instantiated during deserialization.</typeparam>
            <param name="json">Serialized JSON object of type <typeparamref name="T"/>.</param>
            <param name="settings">Deserialization settings. If not specified, default settings set (<see cref="P:RuLaw.JsonDefaultSettings.Deserializer"/>) will be used.</param>
            <returns>Instance of <typeparamref name="T"/> type, deserialized from <paramref name="json"/> string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="json"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="json"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="T:Newtonsoft.Json.JsonConvert"/>
            <seealso cref="T:RuLaw.JsonDefaultSettings"/>
        </member>
        <member name="T:RuLaw.IApiCaller">
            <summary>
              <para>Entry point for RuLaw API.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IApiCaller.ApiToken">
            <summary>
              <para>API token, used to perform web requests. Must be obtained by developers.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IApiCaller.AppToken">
            <summary>
              <para>Application token, used to perform web requests. Must be obtained by developers.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IApiCaller.Format">
            <summary>
              <para>Data exchange format to use.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IApiCaller.Call(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              <para>Makes a remote call to Russian State Duma REST web service and returns it's response.</para>
              <para>Uses value of <see cref="P:RuLaw.IApiCaller.Format"/> for data exchange.</para>
            </summary>
            <param name="resource">Relative URL of web resource to be used. Base endpoint URL is predefined by implentation.</param>
            <param name="parameters">Map of query parameters names/values.</param>
            <param name="headers">Map of HTTP headers names/values.</param>
            <returns>Response from REST web service.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <exception cref="T:RuLaw.RuLawException">If error occurs during the processing of web request, or if request was invalid.</exception>
        </member>
        <member name="M:RuLaw.IApiCaller.Call``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              <para>Makes a remote call to Russian State Duma REST web service and returns deserialized generic response.</para>
              <para>Uses value of <see cref="P:RuLaw.IApiCaller.Format"/> for data exchange.</para>
            </summary>
            <typeparam name="T">Type of object that is created from web service's response.</typeparam>
            <param name="resource">Relative URL of web resource to be used. Base endpoint URL is predefined by implementation.</param>
            <param name="parameters">Map of query parameters names/values.</param>
            <param name="headers">Map of HTTP headers names/values.</param>
            <returns>Generic response from REST web service.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resource"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <exception cref="T:RuLaw.RuLawException">If error occurs during the processing of web request, or if request was invalid.</exception>
        </member>
        <member name="T:RuLaw.IApiCallerExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IApiCallerExtensions"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IApiCaller"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Call(RuLaw.IApiCaller,System.String,System.Object,System.Object)">
            <summary>
              <para>Makes a remote call to Russian State Duma REST web service and returns it's response.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="resource">Relative URL of web resource to be used. Base endpoint URL is predefined by implentation.</param>
            <param name="parameters">Object whose public properties represent query parameters names/values.</param>
            <param name="headers">Object whose public properties represent HTTP headers names/values.</param>
            <returns>Response from REST web service.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="resource"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Call``1(RuLaw.IApiCaller,System.String,System.Object,System.Object)">
            <summary>
              <para>Makes a remote call to Russian State Duma REST web service and returns deserialized generic response.</para>
            </summary>
            <typeparam name="T">Type of object that is created from web service's response.</typeparam>
            <param name="caller">API caller instance to be used.</param>
            <param name="resource">Relative URL of web resource to be used. Base endpoint URL is predefined by implentation.</param>
            <param name="parameters">Object whose public properties represent query parameters names/values.</param>
            <param name="headers">Object whose public properties represent HTTP headers names/values.</param>
            <returns>Generic response from REST web service.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="resource"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resource"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Branches(RuLaw.IApiCaller)">
            <summary>
              <para>Returns list of laws branches.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Collection of laws branches.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-otrasley-zakonodatelstva"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Branches(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.ILawBranch}@)">
            <summary>
              <para>Returns list of laws branches.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="branches">Collection of laws branches.</param>
            <returns><c>true</c> if call was successful and <paramref name="branches"/> output parameter contains list of law branches, or <c>false</c> if call failed and <paramref name="branches"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-otrasley-zakonodatelstva"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Committees(RuLaw.IApiCaller)">
            <summary>
              <para>Returns list of committees.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Collection of committees.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-komitetov"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Committees(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.ICommittee}@)">
            <summary>
              <para>Returns list of committees.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="committees">Collection of committees.</param>
            <returns><c>true</c> if call was successful and <paramref name="committees"/> output parameter contains list of committees, or <c>false</c> if call failed and <paramref name="committees"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-komitetov"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Deputies(RuLaw.IApiCaller,System.Action{RuLaw.IDeputiesLawApiCall})">
            <summary>
              <para>Returns list of deputies of the State Duma and members of the Federation Council.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Collection of deputies.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-deputatov-gd-i-chlenov-sf"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Deputies(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IDeputy}@,System.Action{RuLaw.IDeputiesLawApiCall})">
            <summary>
              <para>Returns list of deputies of the State Duma and members of the Federation Council.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="deputies">Collection of deputies.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns><c>true</c> if call was successful and <paramref name="deputies"/> output parameter contains list of deputies, or <c>false</c> if call failed and <paramref name="deputies"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-deputatov-gd-i-chlenov-sf"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Deputy(RuLaw.IApiCaller,System.Int64)">
            <summary>
              <para>Returns detailed information about specific deputy of the State Duma.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="id">Identifier of deputy.</param>
            <returns>Detailed deputy information.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/svedeniya-o-deputate"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Deputy(RuLaw.IApiCaller,System.Int64,RuLaw.IDeputyInfo@)">
            <summary>
              <para>Returns detailed information about specific deputy of the State Duma.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="id">Identifier of deputy.</param>
            <param name="deputy">Detailed deputy information.</param>
            <returns><c>true</c> if call was successful and <paramref name="deputy"/> output parameter contains deputy information, or <c>false</c> if call failed and <paramref name="deputy"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/svedeniya-o-deputate"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.FederalAuthorities(RuLaw.IApiCaller,System.Action{RuLaw.IAuthoritiesLawApiCall})">
            <summary>
              <para>Returns list of federal law authorities.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Collection of authorities.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-federalnih-organov-vlasti"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.FederalAuthorities(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IAuthority}@,System.Action{RuLaw.IAuthoritiesLawApiCall})">
            <summary>
              <para>Returns list of federal law authorities.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="authorities">Collection of authorities.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns><c>true</c> if call was successful and <paramref name="authorities"/> output parameter contains list of federal authorities, or <c>false</c> if call failed and <paramref name="authorities"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-federalnih-organov-vlasti"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Instances(RuLaw.IApiCaller,System.Action{RuLaw.IInstancesLawApiCall})">
            <summary>
              <para>Returns list of instances.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Collection of instances.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-instantsiy-rassmotreniya"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Instances(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IInstance}@,System.Action{RuLaw.IInstancesLawApiCall})">
            <summary>
              <para>Returns list of instances.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="instances">Collection of instances.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns><c>true</c> if call was successful and <paramref name="instances"/> output parameter contains list of instances, or <c>false</c> if call failed and <paramref name="instances"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-instantsiy-rassmotreniya"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Laws(RuLaw.IApiCaller,System.Action{RuLaw.ILawsLawApiCall})">
            <summary>
              <para>Returns list of found laws. Response contains records of laws as well as latest events for each of the law.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure parameters of request.</param>
            <returns>Laws search result.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="call"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/poisk-po-zakonoproektam"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Laws(RuLaw.IApiCaller,System.Action{RuLaw.ILawsLawApiCall},RuLaw.ILawsSearchResult@)">
            <summary>
              <para>Returns list of found laws. Response contains records of laws as well as latest events for each of the law.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure parameters of request.</param>
            <param name="result">Laws search result.</param>
            <returns><c>true</c> if call was successful and <paramref name="result"/> output parameter contains result of laws search, or <c>false</c> if call failed and <paramref name="result"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="call"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/poisk-po-zakonoproektam"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Convocations(RuLaw.IApiCaller)">
            <summary>
              <para>Returns list of State Duma's convocations and sessions.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Collection of convocations.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-sozivov-i-sessiy"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Convocations(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IConvocation}@)">
            <summary>
              <para>Returns list of State Duma's convocations and sessions.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="convocations">Collection of convocations.</param>
            <returns><c>true</c> if call was successful and <paramref name="convocations"/> output parameter contains list of convocations, or <c>false</c> if call failed and <paramref name="convocations"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-sozivov-i-sessiy"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Questions(RuLaw.IApiCaller,System.Action{RuLaw.IQuestionsLawApiCall})">
            <summary>
              <para>Returns list of questions of the meetings agend of the State Duma.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Questions search result.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/voprosi-zasedaniy-gosudarstvennoy-dumi"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Questions(RuLaw.IApiCaller,RuLaw.IQuestionsSearchResult@,System.Action{RuLaw.IQuestionsLawApiCall})">
            <summary>
              <para>Returns list of questions of the meetings agend of the State Duma.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="result">Questions search result.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns><c>true</c> if call was successful and <paramref name="result"/> output parameter contains questions search result, or <c>false</c> if call failed and <paramref name="result"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/voprosi-zasedaniy-gosudarstvennoy-dumi"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.RegionalAuthorities(RuLaw.IApiCaller,System.Action{RuLaw.IAuthoritiesLawApiCall})">
            <summary>
              <para>Returns list of regional law authorities.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Collection of authorities.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-regionalnih-organov-vlasti"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.RegionalAuthorities(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IAuthority}@,System.Action{RuLaw.IAuthoritiesLawApiCall})">
            <summary>
              <para>Returns list of regional law authorities.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="authorities">Collection of authorities.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns><c>true</c> if call was successful and <paramref name="authorities"/> output parameter contains list of regional authorities, or <c>false</c> if call failed and <paramref name="authorities"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-regionalnih-organov-vlasti"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Requests(RuLaw.IApiCaller)">
            <summary>
              <para>Returns list of deputies requests.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Collection of requests.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/deputatskie-zaprosi"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Requests(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IDeputyRequest}@)">
            <summary>
              <para>Returns list of deputies requests.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="requests">Collection of requests.</param>
            <returns><c>true</c> if call was successful and <paramref name="requests"/> output parameter contains list of deputies requests, or <c>false</c> if call failed and <paramref name="requests"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/deputatskie-zaprosi"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Stages(RuLaw.IApiCaller)">
            <summary>
              <para>Returns list of laws review stages.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Collection of stages.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-stadiy-rassmotreniya"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Stages(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.IPhaseStage}@)">
            <summary>
              <para>Returns list of laws review stages.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="stages">Collection of stages.</param>
            <returns><c>true</c> if call was successful and <paramref name="stages"/> output parameter contains list of stages, or <c>false</c> if call failed and <paramref name="stages"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-stadiy-rassmotreniya"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Topics(RuLaw.IApiCaller)">
            <summary>
              <para>Returns list of topics (subject units).</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Collection of topics.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-tematicheskih-blokov"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Topics(RuLaw.IApiCaller,System.Collections.Generic.IEnumerable{RuLaw.ITopic}@)">
            <summary>
              <para>Returns list of topics (subject units).</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="topics">Collection of topics.</param>
            <returns><c>true</c> if call was successful and <paramref name="topics"/> output parameter contains list of topics, or <c>false</c> if call failed and <paramref name="topics"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/spisok-tematicheskih-blokov"/>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Transcripts(RuLaw.IApiCaller)">
            <summary>
              <para>Returns API caller object to search for transcript.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Transcripts API caller.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:RuLaw.IApiCallerExtensions.Votes(RuLaw.IApiCaller)">
            <summary>
              <para>Returns API caller object to search for votes/votings.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <returns>Votes API caller.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="caller"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.IApiConfigurator">
            <summary>
              <para>Configurator of basic parameters that are used when making requests to Russian State Duma REST web service.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IApiConfigurator.Format(RuLaw.ApiDataFormat)">
            <summary>
              <para>Specifies data exchange format to use.</para>
            </summary>
            <param name="format">Data format.</param>
            <returns>Back reference to the current configurator instance.</returns>
        </member>
        <member name="M:RuLaw.IApiConfigurator.ApiKey(System.String)">
            <summary>
              <para>Specifies API key to use.</para>
            </summary>
            <param name="key">API key.</param>
            <returns>Back reference to the current configurator instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="key"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:RuLaw.IApiConfigurator.AppKey(System.String)">
            <summary>
              <para>Specified Application key to use.</para>
            </summary>
            <param name="key">Application key.</param>
            <returns>Back reference to the current configurator instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="key"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="T:RuLaw.ITranscriptsApiCaller">
            <summary>
              <para>Represents an API caller regarding operations of searching for transcripts.</para>
            </summary>
        </member>
        <member name="P:RuLaw.ITranscriptsApiCaller.Api">
            <summary>
              <para>Russian State Duma REST API caller instance.</para>
            </summary>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCaller.Date(System.DateTime)">
            <summary>
              <para>Returns full transcripts text for given date.</para>
            </summary>
            <param name="date">Date for which to return transcripts.</param>
            <returns>Transcripts for given date.</returns>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogrammi-na-zadannuyu-datu"/>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCaller.Deputy(System.Int64,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{RuLaw.PageSize})">
            <summary>
              <para>Returns transcripts of particular deputy's speeches.</para>
            </summary>
            <param name="id">Identifier of deputy.</param>
            <param name="from">Lower bound (min) date of sessions.</param>
            <param name="to">Upper bound (max) date of sessions.</param>
            <param name="name">Name of question.</param>
            <param name="page">Number of page in paged result. Equals to 1 by default.</param>
            <param name="limit">Number of records per page. Equals to 20 by default.</param>
            <returns>Transcripts of given deputy.</returns>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogrammi-vistupleniy-deputata"/>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCaller.Law(System.String)">
            <summary>
              <para>Returns transcript of given law.</para>
            </summary>
            <param name="number">Number of law.</param>
            <returns>Transcript of given law.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="number"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogrammi-po-zakonoproektu"/>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCaller.Question(System.Int32,System.Int32)">
            <summary>
              <para>Returns transcripts of Duma's agenda question.</para>
            </summary>
            <param name="meeting">Meeting's code.</param>
            <param name="question">Question's code.</param>
            <returns>Transcript of agenda's question.</returns>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogramma-rassmotreniya-voprosa"/>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCaller.Resolution(System.String)">
            <summary>
              <para>Returns transcripts of resolution's draft.</para>
            </summary>
            <param name="number">Number of resolution.</param>
            <returns>Transcript of resolution.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="number"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogrammi-po-proektu-postanovleniya"/>
        </member>
        <member name="T:RuLaw.ITranscriptsApiCallerExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.ITranscriptsApiCaller"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.ITranscriptsApiCaller"/>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCallerExtensions.Deputy(RuLaw.ITranscriptsApiCaller,System.Action{RuLaw.IDeputyTranscriptLawApiCall})">
            <summary>
              <para>Returns transcription of deputy's speeches.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Deputy's transcripts result.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="call"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogrammi-vistupleniy-deputata"/>
        </member>
        <member name="M:RuLaw.ITranscriptsApiCallerExtensions.Deputy(RuLaw.ITranscriptsApiCaller,System.Action{RuLaw.IDeputyTranscriptLawApiCall},RuLaw.IDeputyTranscriptsResult@)">
            <summary>
              <para>Returns transcription of deputy's speeches.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <param name="result">Deputy's transcripts result.</param>
            <returns><c>true</c> if call was successful and <paramref name="result"/> output parameter contains result of deputy's transcripts search, or <c>false</c> if call failed and <paramref name="result"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="call"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/stenogrammi-vistupleniy-deputata"/>
        </member>
        <member name="T:RuLaw.IVotesApiCaller">
            <summary>
              <para>Represents an API caller regarding operations of searching for votes/votings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.IVotesApiCaller.Api">
            <summary>
              <para>Russian State Duma REST API caller instance.</para>
            </summary>
        </member>
        <member name="M:RuLaw.IVotesApiCaller.Search(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int32},System.Nullable{RuLaw.PageSize},System.Nullable{RuLaw.VotesSorting})">
            <summary>
              <para>Performs search through open results of Duma's voting sessions.</para>
            </summary>
            <param name="convocation">Identifier or convocation.</param>
            <param name="from">Lower bound (min) date of convocations.</param>
            <param name="to">Upper bound (max) date of convocations.</param>
            <param name="faction">Identifier of faction.</param>
            <param name="deputy">Identifier of deputy.</param>
            <param name="number">Number of law.</param>
            <param name="keywords">Search keywords.</param>
            <param name="page">Number of page in paged result. Equals to 1 by default.</param>
            <param name="limit">Number of records per page. Equals to 20 by default.</param>
            <param name="sorting">Votes sorting type.</param>
            <returns>Votes search result.</returns>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/poisk-golosovaniy"/>
        </member>
        <member name="T:RuLaw.IVotesApiCallerExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:RuLaw.IVotesApiCaller"/>.</para>
            </summary>
            <seealso cref="T:RuLaw.IVotesApiCaller"/>
        </member>
        <member name="M:RuLaw.IVotesApiCallerExtensions.Search(RuLaw.IVotesApiCaller,System.Action{RuLaw.IVotesSearchLawApiCall})">
            <summary>
              <para>Returns results of votes search.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <returns>Votes search result.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="call"/> is a <c>null</c> reference.</exception>
            <exception cref="T:RuLaw.RuLawException">If there was an error during processing of web request, or if request was considered as invalid.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/poisk-golosovaniy"/>
        </member>
        <member name="M:RuLaw.IVotesApiCallerExtensions.Search(RuLaw.IVotesApiCaller,System.Action{RuLaw.IVotesSearchLawApiCall},RuLaw.IVotesSearchResult@)">
            <summary>
              <para>Returns results of votes search.</para>
            </summary>
            <param name="caller">API caller instance to be used.</param>
            <param name="call">Delegate to configure additional parameters of request.</param>
            <param name="result">Votes search result.</param>
            <returns><c>true</c> if call was successful and <paramref name="result"/> output parameter contains result of votes search, or <c>false</c> if call failed and <paramref name="result"/> output parameter is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="caller"/> or <paramref name="call"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:http://api.duma.gov.ru/pages/dokumentatsiya/poisk-golosovaniy"/>
        </member>
        <member name="T:RuLaw.JsonDefaultSettings">
            <summary>
              <para>Default settings for <see cref="T:Newtonsoft.Json.JsonConverter"/>.</para>
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="P:RuLaw.JsonDefaultSettings.Deserializer">
            <summary>
              <para>Default JSON deserializer settings.</para>
            </summary>
        </member>
        <member name="P:RuLaw.JsonDefaultSettings.Serializer">
            <summary>
              <para>Default JSON serializer settings.</para>
            </summary>
        </member>
        <member name="T:RuLaw.JsonEntityOrderedContractResolver">
            <summary>
              <para>Custom JSON <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/> that orders serialized properties alphabetically, as well as placing property named "id" (case-insensitive), if it exists, at the top.</para>
            </summary>
        </member>
        <member name="T:RuLaw.PageSize">
            <summary>
              <para>Number of results to display per page.</para>
            </summary>
        </member>
        <member name="F:RuLaw.PageSize.Five">
            <summary>
              <para>Five.</para>
            </summary>
        </member>
        <member name="F:RuLaw.PageSize.Ten">
            <summary>
              <para>Ten.</para>
            </summary>
        </member>
        <member name="F:RuLaw.PageSize.Twenty">
            <summary>
              <para>Twenty.</para>
            </summary>
        </member>
        <member name="F:RuLaw.PageSize.Fifty">
            <summary>
              <para>Fifty.</para>
            </summary>
        </member>
        <member name="F:RuLaw.PageSize.Hundred">
            <summary>
              <para>Hundred.</para>
            </summary>
        </member>
        <member name="T:RuLaw.RuLaw">
            <summary>
              <para>Entry point to RuLaw API client service, allowing to perform remote calls to API web service.</para>
            </summary>
            <seealso cref="!:http://api.duma.gov.ru"/>
        </member>
        <member name="M:RuLaw.RuLaw.API(System.Action{RuLaw.IApiConfigurator})">
            <summary>
              <para>Initializes a caller object to perform web requests to RuLaw API.</para>
            </summary>
            <param name="configurator">Delegate to perform API setup process.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="configurator"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:RuLaw.RuLawException">
            <summary>
              <para>Base exception that represents a failure in the process of RuLaw API method call.</para>
            </summary>
        </member>
        <member name="M:RuLaw.RuLawException.#ctor(RuLaw.Error,System.Exception)">
            <summary>
              <para>Initializes a new instance of the exception with a specified error message and a reference to the inner exception that is the cause of this exception.</para>
            </summary>
            <param name="error">The error that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference if no inner exception is specified.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="error"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="P:RuLaw.RuLawException.Error">
            <summary>
              <para>Error that explains the reason for the exception.</para>
            </summary>
        </member>
        <member name="T:RuLaw.VotesSorting">
            <summary>
              <para>Type of votes sorting.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotesSorting.DateAscending">
            <summary>
              <para>By date (ascending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotesSorting.DateDescending">
            <summary>
              <para>By date (descending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotesSorting.DateDescendingByDay">
            <summary>
              <para>By date (descending), ascending for each day.</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotesSorting.ResultAscending">
            <summary>
              <para>By result (ascending).</para>
            </summary>
        </member>
        <member name="F:RuLaw.VotesSorting.ResultDescending">
            <summary>
              <para>By result (descending).</para>
            </summary>
        </member>
        <member name="T:RuLaw.VotesSortingExtensions">
            <summary>
              <para>Set of extension methods for enumeration <see cref="T:RuLaw.VotesSorting"/>.</para>
            </summary>
        </member>
        <member name="M:RuLaw.VotesSortingExtensions.String(RuLaw.VotesSorting)">
            <summary>
              <para></para>
            </summary>
            <param name="sorting"></param>
            <returns></returns>
        </member>
    </members>
</doc>
